let userId = this.props.params.id;
fetch(`/api/v1/users/${userId}`)
.then(response => response.json())
.then(responseData => {
  debugger;
  this.setState({ user: responseData });
});

let userId = this.props.params.id;
  .then(response => {
    let parsed = response.json()
    return parsed
  }).then (user => {
    this.setState({ user: responseData });
  })

Object {id: 1, email: "testuser1@email.com", created_at: "2017-05-04T17:49:14.842Z", updated_at: "2017-05-05T19:05:54.962Z", first_name: "test"…}

<section>
  <h1>Profile</h1>
  <ul>
    <li>First Name {this.state.user.first_name}</li>
    <li>Last Name {this.state.user.last_name}</li>
    <li>Username {this.state.user.username}</li>
  </ul>
</section>

import React, { Component } from 'react';

class UsersContainer extends Component {
  constructor(props) {
    super(props);
      this.state = {
        users: {}
      }
    }

    componentDidMount() {
        fetch('/api/v1/users')
        .then(response => response.json())
        .then(responseData => {
          this.setState({ users: responseData });
      });
    }

  render() {
    let users = this.state.users.map(user => {
      return(
        <UserShow
        id={user.id}
        firstName={user.first_name}
        lastName={user.last_name}
        username={user.username}
        email={user.email}
        />
      )
  })
}
}

let formPayload = {
  playerTwo: this.state.playerTwo,
  playerThree: this.state.playerThree,
  playerFour: this.state.playerFour
};
this.props.addPlayer(formPayload);
}

getInitialState() { return { items: [] } }
Read more at https://www.pluralsight.com/guides/ruby-ruby-on-rails/building-a-crud-interface-with-react-and-ruby-on-rails#M6Dj8SeWqgFKSRCg.99

getInitialState() {
    return {
      employee: this.props.employee,
      editMode: false,
      errors: {}
    }

export default UsersContainer;

handleHits(prevHits) {
  debugger;

  import React, { Component } from 'react';

  class Score extends Component {
    constructor(props) {
      super(props);
      }

  render() {
    return(
          <h1 className="hits" onClick={() => {this.props.handleChange(this.props.id, this.props.hits) }}>
          {(() => { handlePointDisplay (this.props.hits)
            switch(this.props.hits) {
              case 1: return '/';
              case 2: return 'X';
              case 3: return '⨂';
              default: return " ";
            }
       })()}
       </h1>
    )
  }
  }

  export default Score;

  case 1:
    return {
      ...prevState, scores: Object.assign([...prevState.scores], {[num]: {...prevState.scores[num], hits: prevState.scores[num].hits + 1, log: 'X'} })
      }
    case 2:
      return {
        ...prevState, scores: Object.assign([...prevState.scores], {[num]: {...prevState.scores[num], hits: prevState.scores[num].hits + 1, log: String.fromCharCode(10754)}
      })
      }
      case 3:
        return {
          ...prevState, scores: Object.assign([...prevState.scores], {[num]: {...prevState.scores[num], hits: prevState.scores[num].hits - 3, log: " "}
        })
        }
      default: return " ";



      <Switch location={isModal ? this.previousLocation : location}>

      <Route path="ms/msgs" component={Notifications} />
      </Switch>
      {isModal ? <Route component={Notifications} /> : null}
      <h1>HERE I AM</h1>



      state = {
      open: true
    };

    handleOpen = () => {
      this.setState({ open: false });
    };

    handleClose = () => {
      this.setState({ open: true });
    };

    import React from "react";
import Typography from "@material-ui/core/Typography";
import Modal from "@material-ui/core/Modal";
import Button from "@material-ui/core/Button";
import { withStyles } from "@material-ui/core/styles";

function rand() {
  return Math.round(Math.random() * 20) - 10;
}

function getModalStyle() {
  const top = 50 + rand();
  const left = 50 + rand();

  return {
    top: `${top}%`,
    left: `${left}%`,
    transform: `translate(-${top}%, -${left}%)`
  };
}

const styles = theme => ({
  paper: {
    position: "absolute",
    width: theme.spacing.unit * 50,
    backgroundColor: theme.palette.background.paper,
    boxShadow: theme.shadows[5],
    padding: theme.spacing.unit * 4
  }
});

class Notifications extends React.Component {
  render() {
    let value = true;
    const { classes } = this.props;
    let back = e => {
      e.stopPropagation();
      this.history.goBack();
    };

    return (
      <div>
        <Typography gutterBottom>
          Click to get the full Modal experience!
        </Typography>
        <Button onClick={this.handleOpen}>Open Modal</Button>
        <Modal
          aria-labelledby="simple-modal-title"
          aria-describedby="simple-modal-description"
          open={value}
        >
          <div style={getModalStyle()} className={classes.paper}>
            <Typography variant="h6" id="modal-title">
              Text in a modal
            </Typography>
            <Typography variant="subtitle1" id="simple-modal-description">
              Duis mollis, est non commodo luctus, nisi erat porttitor ligula.
            </Typography>
            <NotificationsWrapped />
          </div>
        </Modal>
      </div>
    );
  }
}

// We need an intermediary variable for handling the recursive nesting.
const NotificationsWrapped = withStyles(styles)(Notifications);

export default NotificationsWrapped;

// {!requesting && !!errors.length && (
//            <Errors message="Failure to signup due to:" errors={errors} />
//          )}
//          {!requesting && !!messages.length && (
//            <Messages messages={messages} />
//          )}
//          {!requesting && successful && (
//            <div>
//              Signup Successful! <Link to="/login">Click here to Login »</Link>
//            </div>
//          )}
